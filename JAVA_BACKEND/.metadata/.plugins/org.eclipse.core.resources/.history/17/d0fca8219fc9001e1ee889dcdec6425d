package com.backend.safarnama.controller;

import java.io.IOException;
import java.sql.SQLException;

import javax.sql.rowset.serial.SerialException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.backend.safarnama.model.Room;
import com.backend.safarnama.response.RoomResponse;
import com.backend.safarnama.service.IHotelService;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping("/hotels")
@CrossOrigin(origins = "http://localhost:3000")
public class HotelController {
	
		@Autowired
		private final IHotelService hotelService;

		@PostMapping("/add/room")
		public ResponseEntity<RoomResponse> addNewRoom(@RequestParam("photo")MultipartFile photo,@RequestParam("roomType")String roomType,@RequestParam("roomPrice")double roomPrice,@RequestParam("roomNo")String roomNo,@RequestParam("capacity")int capacity) throws SerialException, IOException, SQLException{
				Room savedRoom = hotelService.addNewRoom(photo,roomNo,roomType,roomPrice,capacity);
				RoomResponse response =new RoomResponse(savedRoom.getId(), savedRoom.getRoomNo(), savedRoom.getRoomType(), savedRoom.getRoomPrice(), savedRoom.getCapacity());
				return ResponseEntity.ok(response);
		}
		
		@GetMapping("/types")
		public ResponseEntity<?> get(){
			return ResponseEntity.ok(hotelService.getAllRoomTypes());
		}
		
		@GetMapping("/all-rooms")
		public ResponseEntity<?> getAllRooms() {
			return ResponseEntity.ok(hotelService.getAllRooms());
		}
		
		@DeleteMapping("/delete/{roomId}")
		public ResponseEntity<Void> deleteRoom(@PathVariable Long roomId){
			hotelService.deleteRoom(roomId);
			return new ResponseEntity<Void>(HttpStatus.OK);
		}
		
		@GetMapping("/details/{roomId}")
		public ResponseEntity<?> getRoomById(@PathVariable Long roomId) {
			return ResponseEntity.ok(hotelService.getRoomById(roomId));
		}
		
		@PutMapping("/update/{roomId}")
		public ResponseEntity<?> updateRoom(@PathVariable Long roomId,@RequestParam("photo")MultipartFile photo,@RequestParam("roomType")String roomType,@RequestParam("roomPrice")double roomPrice,@RequestParam("roomNo")String roomNo,@RequestParam("capacity")int capacity) throws SerialException, IOException, SQLException{
			Room req = hotelService.updateRoom(roomId, photo,roomNo,roomType,roomPrice,capacity);
			RoomResponse response =new RoomResponse(req.getId(), req.getRoomNo(), req.getRoomType(), req.getRoomPrice(), req.getCapacity());
			return ResponseEntity.ok(response);
		}
		
		
	
}

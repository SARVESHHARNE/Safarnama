package com.backend.safarnama.service;

import java.io.IOException;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.List;
import java.util.stream.Collectors;

import javax.sql.rowset.serial.SerialBlob;
import javax.sql.rowset.serial.SerialException;

import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.util.MethodInvocationRecorder.Recorded.ToMapConverter;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.backend.safarnama.model.Room;
import com.backend.safarnama.repository.RoomRepository;
import com.backend.safarnama.response.RoomResponse;

import ch.qos.logback.core.encoder.EncoderBase;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class RoomServiceImpl implements IRoomService {
	@Autowired
	private final RoomRepository roomRepository;
	private String base64Photo;

	@Override
	public Room addNewRoom(MultipartFile photo, String roomNO, String roomType, double roomPrice, int capacity) throws IOException, SerialException, SQLException {
		Room room =new Room();
		room.setRoomNo(roomNO);
		room.setRoomType(roomType);
		room.setRoomPrice(roomPrice);
		room.setCapacity(capacity);
		if(!photo.isEmpty()) {
			byte[] photoBytes=photo.getBytes();
			Blob photoBlob = new SerialBlob(photoBytes);
			room.setPhoto(photoBlob);
		}
	
		return roomRepository.save(room);
	}

	@Override
	public List<String> getAllRoomTypes() {
		
		return roomRepository.findDistinctRoomTypes();
	}

	@Override
	public List<RoomResponse> getAllRooms() {
		List<RoomResponse> response = roomRepository.findAll().stream().map(r->{
			byte[] photoBytes = null;
			try {
				photoBytes=r.getPhoto().getBytes(1,(int) r.getPhoto().length());
			} catch (SQLException e) {
				e.printStackTrace();
			}
			RoomResponse roomResponse=new RoomResponse();
			roomResponse.setId(r.getId());
			roomResponse.setPhoto(Base64.encodeBase64String(photoBytes));
			roomResponse.setRoomNo(r.getRoomNo());
			roomResponse.setRoomPrice(r.getRoomPrice());
			roomResponse.setCapacity(r.getCapacity());
			roomResponse.setRoomType(r.getRoomType());
			roomResponse.setBookings(r.getBookings());
				
				return roomResponse;
		}).collect(Collectors.toList());
		return response;
	}

}

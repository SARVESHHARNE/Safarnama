package com.backend.safarnama.service;

import java.sql.SQLException;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.tomcat.util.codec.binary.Base64;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.backend.safarnama.exception.PhotoRetrivalException;
import com.backend.safarnama.exception.ResourceNotFoundException;
import com.backend.safarnama.model.Hotel;
import com.backend.safarnama.repository.HotelRepository;
import com.backend.safarnama.repository.RoomRepository;
import com.backend.safarnama.response.HotelResponse;
import com.backend.safarnama.response.RoomResponse;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class HotelServiceImpl implements IHotelService{
	
	@Autowired
	private final HotelRepository hotelRepository;
	@Autowired
	private final RoomRepository roomRepository;
	@Autowired
	private final ModelMapper mapper;

	@Override
	public void deleteHotel(Long hotelId) {
		
		
	}

	@Override
	public Object getAllHotels() {
		List<HotelResponse> response = hotelRepository.findAll().stream().map(r->{
			byte[] photoBytes = new byte[0];
			try {
				photoBytes=r.getImage().getBytes(1,(int) r.getImage().length());
			} catch (SQLException e) {
				throw new PhotoRetrivalException(e.getMessage());
			}    
			HotelResponse hotelResponse= mapper.map(r,HotelResponse.class);
			hotelResponse.setImage(Base64.encodeBase64String(photoBytes));
			hotelResponse.setRooms(getAllRoomsByHotelId(r));
				
			return hotelResponse;
		}).collect(Collectors.toList());
		return response;
	}

	private List<RoomResponse> getAllRoomsByHotelId(Hotel h) {
		List<RoomResponse> responses = roomRepository.findAllByHotel(h).stream().map(r->{
			byte[] photoBytes = new byte[0];
			try {
				photoBytes=r.getPhoto().getBytes(1,(int) r.getPhoto().length());
			} catch (SQLException e) {
				throw new PhotoRetrivalException(e.getMessage());
			}    
			RoomResponse roomResponse= mapper.map(r,RoomResponse.class);
			roomResponse.setPhoto(Base64.encodeBase64String(photoBytes));
			return roomResponse;
		}).toList();
		return responses;
	}

	@Override
	public List<String> getAllHotelCitys() {
		List<String> citys=hotelRepository.findDistinctHotelCity();
		return citys;
	}

	@Override
	public HotelResponse getHotelById(Long hotelId) {
		Hotel h=hotelRepository.findById(hotelId).orElseThrow(()->new ResourceNotFoundException("Hotel not found"));
		return mapper.map(h, HotelResponse.class);
	}
	
}
